<?php
// ----------------------------------------------------------------------------
// PREPROCESS
// ----------------------------------------------------------------------------

// we need this for including twig files & subthemes
function eleven_preprocess(&$variables){
  $variables['themepath'] = drupal_get_path('theme','eleven');
}


function eleven_preprocess_html(&$variables){
 $variables['path'] = \Drupal::service('path.current')->getPath();
 $variables['systempath'] = explode('/', \Drupal::service('path.current')->getPath());
}


// ----------------------------------------------------------------------------
// admin blocks wrappers for
///admin
// admin/reports
// admin/structure
// ----------------------------------------------------------------------------
function eleven_preprocess_admin_block_content(&$variables) {
  // this is not pretty but lets taste on the path and grap the
  // section of it so we can
  $variables['path'] = \Drupal::service('path.current')->getPath() ;

  $path = explode('/', \Drupal::service('path.current')->getPath());
  if($path[1] == "admin") {
    $variables['admin'] = true;
  }
  if( isset($path[2]) ) {
    $variables['admin_section'] = $path[2];
  }

  if( isset($path[3]) ) {
    $variables['admin_subsection'] = $path[3];
  }

  // we need a title for the section wrapper and aria-label
  $request = \Drupal::request();
  if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
  }
  $variables['section_title'] = $title;

}


function eleven_preprocess_admin_page(&$variables) {
  // we need a title for the section wrapper and aria-label
  $request = \Drupal::request();
  if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
  }
  $variables['section_title'] = $title;
}





// ----------------------------------------------------------------------------
// Tables
// dont tables for layouts of admin pages content + cause were grownups
//
// ----------------------------------------------------------------------------
function eleven_preprocess_table(&$variables) {
  // we need a title for the section wrapper and aria-label
  $request = \Drupal::request();
  if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
    $title = \Drupal::service('title_resolver')->getTitle($request, $route);
  }
  $variables['section_title'] = $title;

}

function eleven_theme_suggestions_table_alter(array &$suggestions, array $variables) {
  // TODO we can do better here use layout fields suggestion and translate suggestion
  $path = explode('/', \Drupal::service('path.current')->getPath());

  // echo "<pre>";
  // var_dump($path);
  // echo "</pre>";

  if($path[1] == "admin") {
    $variables['admin'] = true;
  }

  if( isset($path[2]) ) {
    $variables['admin_section'] = $path[2];
    $suggestions[] = 'table__' .$path[2] ;
  }

  if(! isset( $path[4])) {
    if( isset($path[3]) ) {
      $suggestions[] = 'table__' .$path[2] .'_' . $path[3];
    }
  }

  if(! isset( $path[5])) {
    if(isset($path[4]) ) {
        $suggestions[] = 'table__' .$path[2] .'_'  .$path[3] .'_' . $path[4];
    }

    if($path[2] == "structure" AND $path[3] =="display-modes") {
      $suggestions[] ='table__displaymodes';
    }

  }

  if( isset( $path[5] )) {
    if($path[2] == "config" AND $path[5] =="fields") {
      $suggestions[] ='table__layout__fields';
    }

    if($path[3] == "paragraphs_type" AND $path[5] =="fields") {
      $suggestions[] ='table__layout__fields';
    }

    if($path[3] == "block" AND $path[5] =="types") {
      $suggestions[] ='table__layout__customblocks';
    }
  }


  if(isset( $path[6])) {
    if($path[4] == "manage" AND $path[6] =="fields") {
      $suggestions[] ='table__layout__fields';
    }
    if($path[4] == "manage" AND $path[6] =="translate") {
      $suggestions[] ='table__layout__translate';
    }
  }

  if(isset( $path[7])) {
    if($path[4] == "manage" AND $path[7] =="fields") {
      $suggestions[] = 'table__' .$path[2] .'_' . $path[3] .'_' . $path[4] .'_' . $path[7];;
      $suggestions[] ='table__layout__fields';
    }
  }

  //protip dont have - in a twig filename its not gonna be picked up
  $suggestions = str_replace('-', '',$suggestions);

  // echo "<pre>";
  // var_dump($suggestions);
  // echo "</pre>";
}

// Dropbutton fix for node edit
function eleven_preprocess_dropbutton_wrapper(&$variables) {

  $path = explode('/', \Drupal::service('path.current')->getPath());

  //we want to know if this is a node edit
  if( isset($path[2]) AND $path[1] == "node" ) {
    $variables['node_edit'] = TRUE;
  }

  if( isset($path[4]) AND $path[4] == "view" ) {
    $variables['view_edit'] = TRUE;
  }


}

function eleven_preprocess_links__dropbutton(&$variables) {

  $path = explode('/', \Drupal::service('path.current')->getPath());

  //we want to know if this is a node edit
  if( isset($path[2]) AND $path[1] == "node" ) {
    $variables['node_edit'] = TRUE;
  }

  if( isset($path[4]) AND $path[3]=="views" AND $path[4] == "view" ) {
    $variables['view_edit'] = TRUE;
  }


}

/* the permission page do fun stuff with the form elements and js so we need a specific template for the label ... */
function eleven_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  $path = explode('/', \Drupal::service('path.current')->getPath());

  if (isset($path[3]) AND $path[1] =="admin" AND $path[2] =="people" AND $path[3] =="permissions") {
    $suggestions[] = 'form_element_label__permissions';
  }

}



// -----------------------------------------------------------------------------
// provide an alternative template for links
// -----------------------------------------------------------------------------
function eleven_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  $path = explode('/', \Drupal::service('path.current')->getPath());

  if( isset($path[2]) ) {
    $suggestions[] = 'links__' . $path[2];
  }

  //fix for views ui
  if( isset($path[4]) AND  $path[2] == "structure"  AND $path[3] == "views"  AND  $path[4] == "view" ) {
    $suggestions[] = 'links__view_admin_ui';
  }

}

// form
function eleven_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

// input fields
function eleven_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $path = explode('/', \Drupal::service('path.current')->getPath());

  //fix for views ui
  // do an uglye test on the paths then check on the wrapper if its not action then add in the new template suggestion
  if( (isset($path[4]) AND  $path[2] == "structure"  AND $path[3] == "views"  AND  $path[4] == "view") and ( isset($variables['element']['#array_parents']) and $variables['element']['#array_parents'][0] != 'actions' ) ) {
    $suggestions[] = 'input__submit__view_admin_ui';
  }

}


//item list
function eleven_theme_suggestions_item_list_alter(array &$suggestions, array $variables) {
  $path = explode('/', \Drupal::service('path.current')->getPath());

  //views list of paths
  if( isset($path[3]) and $path[3] == 'views') {
    $suggestions[] = 'item_list__' . $path[3];
  }

  if( isset($path[3]) and $path[3] == 'styleguide') {
    $suggestions[] = 'item_list__' . $path[3];
  }



}

// function THEMENAME_preprocess_item_list(&$variables) { }




use Drupal\Core\Render\Element;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function eleven_theme_suggestions_container_alter(array &$suggestions, array $variables) {

  if (!empty($variables['element'])) {
    $element = $variables['element'];
  }

  // Provide suggestions to create context, if none already exist.
  if (empty($suggestions)) {
    // If there are no suggestions the implementation is likely via
    // #theme_wrappers, which doesn't provide any context. In that case, use the
    // element being wrapped to derive better context.
    if (!empty($element['#theme_wrappers'])) {
      if (in_array('container', $element['#theme_wrappers'])) {
        // If #type and #theme_wrappers are both 'container', avoid making the
        // context situation worse.
        if (isset($element['#type'])) {
          if ($element['#type'] == 'container') {
            // The children elements likely use #theme, which tells us what is
            // being rendered. This will capture things like the views more link:
            // container__more_link.
            foreach (Element::children($element) as $key) {
              if (isset($element[$key]['#theme'])) {
                  $suggestions[] = 'container__' . $element[$key]['#theme'];
                }
              }
            }
            else {
              // As long as #type is not also 'container', it's just as good an
              // indication of context as #theme. This will capture a Views
              // element container, e.g. container__view
              $suggestions[] = 'container__' . $element['#type'];
            }
          }
        }

        // If there is a #name property, this can be useful too. For example,
        // Views module uses this hook, and this would generate a suggestion
        // like: container__view__machinename.
        if (!empty($element['#name']) && !empty($element['#type'])) {
          $suggestions[] = 'container__' . $element['#type'] . '__' . $element['#name'];
        }
      }
    }

    // Re-route some templates based on those smarter suggestions.
    if (in_array('container__view', $suggestions)) {
      $suggestions[] = 'container__nope';
    }
}

// ----------------------------------------------------------------------------
// node-edit 2 columns
// ----------------------------------------------------------------------------
use Drupal\Core\Form\FormStateInterface;

function eleven_form_node_form_alter(&$form, FormStateInterface $form_state) {

  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = array('node_edit_form');
  $form['advanced']['#type'] = 'container';


  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');

  $form['metacard'] = array(
      'changed' => array(
        '#value' => $is_new,
      ),
      'author' => array(
        '#value' => $node->getOwner()->getUsername(),
      ),
      'publised' => array(
        '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      ),

  );
  $form['meta'] = array(

    '#attributes' => array('class' => array('entity-meta__header')),
       '#type' => 'container',
       '#group' => 'advanced',
       '#weight' => -100,
  );

  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}


// function eleven_editor_js_settings_alter(array &$settings) {
//   foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
//     if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {
//       $settings['editor']['formats'][$text_format_id]['editorSettings']['skin'] = ''office2013', '/themes/eleven/elevenfeat/office2013'';
//     }
//   }
// }
